// Generated by CoffeeScript 1.3.3
" The main application. ";

var AboutPage, App, Editor, GithubCompatibleAjaxRequest, GithubRepo, HomePage, ListView;

Event.observe(window, 'load', function() {
  var o;
  o = new App();
  return $('body').insert(o);
});

App = (function() {

  function App(options) {
    this.self = new Element('div', options);
    Object.extend(this.self, App.prototype);
    this.self.init();
    return this.self;
  }

  App.prototype.init = function() {
    var t,
      _this = this;
    t = "<div style=\"margin: 0px;\">\n    <div id=\"menu\">\n        <a href=\"#\" id=\"home\">OpenSCAD-Editor</a>\n        <a href=\"#about\" id=\"about\">about</a>\n    </div>\n    <div id=\"content\">\n        \n    </div>\n</div>";
    this.insert(new Template(t).evaluate({}));
    this.menu = this.select('#menu')[0];
    this.content = this.select('#content')[0];
    Event.observe(window, 'resize', function(e) {
      return _this.resized();
    });
    Event.observe(window, 'hashchange', function(e) {
      return _this.hashchange();
    });
    this.hashchange();
    this.resized();
  };

  App.prototype.hashchange = function() {
    var args, path, _ref;
    _ref = this.anchor_path(), path = _ref[0], args = _ref[1];
    console.log(['navigating to', path, args]);
    if (!(path != null) || (path !== 'home' && path !== 'about' && path !== 'github')) {
      path = 'home';
    }
    if (path != null) {
      if (path === 'home') {
        this.navigate_to(HomePage, args);
      }
      if (path === 'about') {
        this.navigate_to(AboutPage, args);
      }
      if (path === 'github') {
        this.navigate_to(GithubRepo, args);
      }
    }
  };

  App.prototype.resized = function(e) {
    var width;
    width = document.viewport.getDimensions().width - 30;
    this.content.setStyle({
      width: width + 'px'
    });
    this.menu.setStyle({
      width: width + 'px'
    });
  };

  App.prototype.anchor_path = function() {
    var path;
    path = document.location.href.match(/#([^\/]+)(\/(.+))?/i);
    if (path && path.length >= 4) {
      return [path[1], path[3]];
    }
    return [null, null];
  };

  App.prototype.cleanup = function() {
    return this.select('#content')[0].update('');
  };

  App.prototype.navigate_to = function(ctor, args) {
    this.cleanup();
    this.page = new ctor(args);
    this.select('#content')[0].insert(this.page);
  };

  return App;

})();

" About page. ";


AboutPage = (function() {

  function AboutPage(args, options) {
    this.self = new Element('div', options);
    Object.extend(this.self, AboutPage.prototype);
    this.self.init(args);
    return this.self;
  }

  AboutPage.prototype.init = function(args) {
    var t;
    this.args = args;
    t = "<div id=\"home-page\">\n<br />\n<span style=\"font-size: 34px;\"> <b>About...</b></span><br />\n<p>\n    This is a small project involving OpenSCAD, Github and 3D printing.<br />\n    <br />\n    Github repository @ <a href=\"https://github.com/EiNSTeiN-/openscad-web-editor\">https://github.com/EiNSTeiN-/openscad-web-editor</a>\n</p>\n</div>";
    this.insert(new Template(t).evaluate({}));
  };

  return AboutPage;

})();

" A class encapsulating the editor and the THREE.js viewer ";


Editor = (function() {

  function Editor(text, options) {
    this.self = new Element('div', options);
    Object.extend(this.self, Editor.prototype);
    this.self.init(text);
    return this.self;
  }

  Editor.prototype.init = function(text) {
    var t, _ref,
      _this = this;
    this.text = text;
    if ((_ref = this.text) == null) {
      this.text = '';
    }
    t = "<div>\n    <div id=\"editor-outside\" style=\"float: left;\">\n        <div id=\"editor\" style=\"width: 700px; height: 480px;\"></div>\n    </div>\n    <div id=\"scene\" style=\"float: left; width: 700px; height: 480px; border: 1px #808080 solid; margin: 4px;\"></div>\n</div>";
    this.insert(new Template(t).evaluate({}));
    this.editor_div = this.select('#editor')[0];
    this.editor_outside = this.select('#editor-outside')[0];
    this.scene_div = this.select('#scene')[0];
    this.initeditor();
    this.parser = new lexer.Parser();
    this.scene_width = 700;
    this.height = 480;
    this.zoom = 20;
    this.zoom_speed = 5;
    this.move_theta = 45;
    this.move_phi = 60;
    this.radius = 1600;
    this.initrenderer();
    this.scene = new THREE.Scene();
    this.initcamera();
    this.initlights();
    this.initgrid();
    this.initcontrols();
    this.update();
    this.animate();
    Event.observe(window, 'resize', function(e) {
      return _this.resized();
    });
    new PeriodicalExecuter(function(pe) {
      if (_this.editor_div.cumulativeOffset().top > 0) {
        _this.resized();
        return pe.stop();
      }
    }, 1);
  };

  Editor.prototype.resized = function(e) {
    var clientheight;
    clientheight = window.innerHeight || document.body.clientHeight || document.documentElement.clientHeight;
    this.height = clientheight - this.editor_outside.viewportOffset().top - 20;
    this.editor_width = 550;
    this.scene_width = document.viewport.getDimensions().width - this.editor_width - 40;
    this.renderer.setSize(this.scene_width, this.height);
    this.camera.aspect = this.scene_width / this.height;
    this.editor_outside.setStyle({
      width: this.editor_width + 'px',
      height: this.height + 'px'
    });
    this.editor_div.setStyle({
      width: this.editor_width + 'px',
      height: this.height + 'px'
    });
    this.scene_div.setStyle({
      width: this.scene_width + 'px',
      height: this.height + 'px'
    });
    this.render();
  };

  Editor.prototype.initeditor = function() {
    this.editor_div.update(this.text);
    this.editor = ace.edit(this.editor_div);
    this.editor.setTheme("ace/theme/dawn");
    this.editor.getSession().setMode("ace/mode/scad");
  };

  Editor.prototype.initcontrols = function() {
    var _this = this;
    this.select('#scene')[0].observe('mousewheel', function(e) {
      return _this.mousewheel(e);
    });
    this.controls = new THREE.TrackballControls(this.camera, this.renderer.domElement);
    this.controls.rotateSpeed = 1.0;
    this.controls.panSpeed = 0.2;
    this.controls.noZoom = false;
    this.controls.noPan = false;
    this.controls.staticMoving = true;
    this.controls.dynamicDampingFactor = 0.3;
    this.controls.keys = [65, 83, 68];
  };

  Editor.prototype.mousewheel = function(e) {
    this.zoom += (e.wheelDelta > 0 ? -this.zoom_speed : this.zoom_speed);
    this.camera.fov = this.zoom;
    this.camera.updateProjectionMatrix();
    this.render();
  };

  Editor.prototype.initcamera = function() {
    this.view_angle = 10;
    this.aspect = this.scene_width / this.height;
    this.near = 1;
    this.far = 10000;
    this.camera = new THREE.PerspectiveCamera(this.zoom, this.aspect, this.near, this.far);
    this.camera.position.y = -450;
    this.camera.position.z = 400;
    this.camera.lookAt(new THREE.Vector3(0, 0, 0));
    this.scene.add(this.camera);
  };

  Editor.prototype.initrenderer = function() {
    var params;
    params = {
      clearColor: 0x00000000,
      clearAlpha: 0,
      antialias: true
    };
    this.renderer = new THREE.CanvasRenderer(params);
    this.renderer.clear();
    this.renderer.setSize(this.scene_width, this.height);
    this.renderer.shadowMapEnabled = true;
    this.renderer.shadowMapAutoUpdate = true;
    this.select('#scene')[0].insert(this.renderer.domElement);
    this.select('#scene')[0].setStyle({
      backgroundColor: '#ffffff'
    });
  };

  Editor.prototype.initlights = function() {
    var ambientLight, directionalLight;
    ambientLight = new THREE.AmbientLight(0x404040);
    this.scene.add(ambientLight);
    directionalLight = new THREE.DirectionalLight(0xffffff);
    directionalLight.position.x = 1;
    directionalLight.position.y = 1;
    directionalLight.position.z = 0.75;
    directionalLight.position.normalize();
    this.scene.add(directionalLight);
    directionalLight = new THREE.DirectionalLight(0x808080);
    directionalLight.position.x = -1;
    directionalLight.position.y = 1;
    directionalLight.position.z = -0.75;
    directionalLight.position.normalize();
    this.scene.add(directionalLight);
  };

  Editor.prototype.initgrid = function() {
    var geometry, i, line, material, _i;
    this.grid_size = 200;
    this.grid_spacing = 10;
    geometry = new THREE.Geometry();
    geometry.vertices.push(new THREE.Vector3(-this.grid_size / 2, 0, 0));
    geometry.vertices.push(new THREE.Vector3(this.grid_size / 2, 0, 0));
    material = new THREE.LineBasicMaterial({
      color: 0x000000,
      opacity: 0.4
    });
    for (i = _i = 0; _i <= 20; i = ++_i) {
      line = new THREE.Line(geometry, material);
      line.position.y = (i * this.grid_spacing) - (this.grid_size / 2);
      this.scene.add(line);
      line = new THREE.Line(geometry, material);
      line.position.x = (i * this.grid_spacing) - (this.grid_size / 2);
      line.rotation.z = 90 * Math.PI / 180;
      this.scene.add(line);
    }
  };

  Editor.prototype.animate = function() {
    var _this = this;
    requestAnimationFrame(function() {
      return _this.animate();
    });
    this.render();
  };

  Editor.prototype.render = function() {
    this.controls.update();
    this.renderer.render(this.scene, this.camera);
  };

  Editor.prototype.setValue = function(text) {
    return this.editor.setValue(text);
  };

  Editor.prototype.getValue = function() {
    return this.editor.getValue();
  };

  Editor.prototype.set_fetch_file_callback = function(fetch_file_callback) {
    this.fetch_file_callback = fetch_file_callback;
  };

  Editor.prototype.include_callback = function(name) {
    var content, tree;
    content = this.fetch_file_callback(name);
    console.log(['include file', name, 'size', content.length]);
    tree = this.parser.parse(content);
    return tree;
  };

  Editor.prototype.use_callback = function(name) {
    var content, tree;
    content = this.fetch_file_callback(name);
    console.log(['use file', name, 'size', content.length]);
    tree = this.parser.parse(content);
    return tree;
  };

  Editor.prototype.update = function() {
    var evaluator, material, params, root_ctx, s, text, threerender, tree,
      _this = this;
    text = this.getValue();
    console.log(['text length', text.length]);
    if (text.length === 0) {
      return;
    }
    try {
      tree = this.parser.parse(text);
      console.log(['tree', tree]);
      evaluator = new OpenSCADEvaluator(tree);
      root_ctx = new Context();
      evaluator.register_builtins(root_ctx);
      if (this.fetch_file_callback != null) {
        root_ctx.set('include', function(name) {
          return _this.include_callback(name);
        });
        root_ctx.set('use', function(name) {
          return _this.use_callback(name);
        });
      }
      s = evaluator.evaluate(root_ctx);
      threerender = new THREERenderer(this.scene);
      this.geometry = threerender.render(s);
      console.log(['s', s]);
    } catch (e) {
      console.log(['error while parsing.', e]);
      console.log(e.stack);
      return;
    }
    console.log(['geometry', this.geometry]);
    params = {
      wireframe: false,
      opacity: 0.7,
      color: new THREE.Color(0xcc0000),
      vertexColors: new THREE.Color(0),
      wireframeLinewidth: 2
    };
    material = new THREE.MeshBasicMaterial(params);
    this.mesh = new THREE.Mesh(this.geometry, material);
    this.scene.add(this.mesh);
    this.render();
  };

  return Editor;

})();

" Home page. ";


HomePage = (function() {

  function HomePage(args, options) {
    this.self = new Element('div', options);
    Object.extend(this.self, HomePage.prototype);
    this.self.init(args);
    return this.self;
  }

  HomePage.prototype.init = function(args) {
    var t,
      _this = this;
    this.args = args;
    t = "<div id=\"home-page\">\n<br />\n<span style=\"font-size: 34px;\"> <b>OpenSCAD web-based editor</b></span><br />\n<p>\n    View and edit your OpenSCAD models in your browser!\n</p>\n<span>\n    <span class=\"error-message\"></span>\n    <input id=\"search-term\" type=\"text\" style=\"width: 400px;\" />\n    <a href=\"#\" class=\"browse\">browse &raquo;</a><br />\n    <span style=\"font-size: smaller; color: #808080;\">Enter a github repository URL in the box above.</span>\n</span>\n</div>";
    this.insert(new Template(t).evaluate({}));
    this.error = this.select('.error-message')[0];
    this.input = this.select('#search-term')[0];
    this.select('.browse')[0].observe('click', function(e) {
      _this.browse();
      return e.stop();
    });
    this.input.observe('keyup', function(e) {
      return _this.keyup(e);
    });
    this.error.hide();
    this.input.value = 'https://github.com/josefprusa/Prusa3/';
  };

  HomePage.prototype.parse_repo_name = function(url) {
    url = url.match(/http[s]?:\/\/github\.com\/(.+)/i);
    if (url && url.length >= 2) {
      return url[1];
    }
  };

  HomePage.prototype.keyup = function(e) {
    this.error.hide();
    if (e.keyCode === Event.KEY_RETURN) {
      this.browse();
    }
  };

  HomePage.prototype.browse = function() {
    var current_url;
    this.github_url = this.input.value;
    this.github_repo = this.parse_repo_name(this.github_url);
    if (!(this.github_repo != null)) {
      console.log(['error parsing url:', this.github_url]);
      this.error.update("I'm having trouble understanding this url, any chance there is a typo?<br />");
      this.error.show();
      return;
    }
    current_url = document.location.href.match(/([^#]+)(#.*)?/)[1];
    document.location.href = current_url + '#github/' + this.github_repo;
  };

  return HomePage;

})();

" Github repository browsing. ";


ListView = (function() {

  function ListView(config, options) {
    this.self = new Element('div', options);
    Object.extend(this.self, ListView.prototype);
    this.self.init(config);
    return this.self;
  }

  ListView.prototype.init = function(config) {
    var col, i, t, text, _base, _base1, _i, _ref, _ref1, _ref2;
    this.config = config;
    if ((_ref = (_base = this.config).columns) == null) {
      _base.columns = [];
    }
    if ((_ref1 = (_base1 = this.config).columns_width) == null) {
      _base1.columns_width = [
        (function() {
          var _i, _ref2, _results;
          _results = [];
          for (i = _i = 0, _ref2 = this.config.columns; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
            _results.push(200);
          }
          return _results;
        }).call(this)
      ];
    }
    this.addClassName('listview');
    this.setStyle({
      backgroundColor: '#E6F0E6',
      padding: '3px',
      'float': 'left'
    });
    t = "<div class=\"headers-row\" style=\"float: left; clear: both; border: 1px #4D944D solid;\"></div>\n<div class=\"data-rows\" style=\"float: left; clear: both;\"></div>";
    this.insert(new Template(t).evaluate({}));
    this.headers = this.select('.headers-row')[0];
    this.rows = this.select('.data-rows')[0];
    for (col = _i = 0, _ref2 = this.config.columns.length - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; col = 0 <= _ref2 ? ++_i : --_i) {
      text = this.config.columns[col];
      t = "<div class=\"header\" style=\"float: left; padding: 6px; color: #003300; background-color: #CCE0CC; font-weight: bold;\">" + text + "</div>";
      this.headers.insert(new Template(t).evaluate({}));
      this.select('.header')[col].setStyle({
        width: this.config.columns_width[col] + 'px'
      });
    }
  };

  ListView.prototype.append_row = function(data) {
    var cell, col, row, t, text, _i, _ref;
    if (data.length !== this.config.columns.length) {
      console.log(['number of data elements does not match number of columns!', data]);
      return;
    }
    row = this.select('.row').length;
    t = "<div class=\"row\" style=\"float: left; clear: both; background-color: white; border-bottom: 1px #4D944D solid; border-left: 1px #4D944D solid; border-right: 1px #4D944D solid;\"></div>";
    this.rows.insert(new Template(t).evaluate({}));
    for (col = _i = 0, _ref = this.config.columns.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; col = 0 <= _ref ? ++_i : --_i) {
      text = data[col];
      t = "<div class=\"cell\" style=\"float: left; padding: 6px;\">" + text + "</div>";
      this.select('.row')[row].insert(new Template(t).evaluate({}));
      cell = this.select('.row')[row].select('.cell')[col];
      cell.setStyle({
        width: this.config.columns_width[col] + 'px',
        height: '22px'
      });
    }
    return this.select('.row')[row];
  };

  return ListView;

})();

" This here is necessary because PrototypeJS stupidly sets headers that are rejected by the xmlhttprequest. ";


GithubCompatibleAjaxRequest = Class.create(Ajax.Request, {
  setRequestHeaders: function() {
    var extras, headers, i, name, _i, _j, _len, _ref, _results,
      _this = this;
    headers = {
      'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'
    };
    if (this.method === 'post') {
      if (this.options.encoding != null) {
        headers['Content-type'] = this.options.contentType + '; charset=' + this.options.encoding;
      } else {
        headers['Content-type'] = this.options.contentType;
      }
    }
    if (this.transport.overrideMimeType && (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0, 2005])[1] < 2005) {
      headers['Connection'] = 'close';
    }
    if (typeof this.options.requestHeaders === 'object') {
      extras = this.options.requestHeaders;
      if (Object.isFunction(extras.push)) {
        for (i = _i = 0, _ref = extras.length - 1; _i <= _ref; i = _i += 2) {
          headers[extras[i]] = extras[i + 1];
        }
      } else {
        $H(extras).each(function(pair) {
          return headers[pair.key] = pair.value;
        });
      }
    }
    _results = [];
    for (_j = 0, _len = headers.length; _j < _len; _j++) {
      name = headers[_j];
      _results.push(this.transport.setRequestHeader(name, headers[name]));
    }
    return _results;
  }
});

GithubRepo = (function() {

  function GithubRepo(args, options) {
    this.self = new Element('div', options);
    Object.extend(this.self, GithubRepo.prototype);
    this.self.init(args);
    return this.self;
  }

  GithubRepo.prototype.parse_args = function(args) {
    var _ref;
    if (args[0] === '/') {
      args = args.substring(1);
    }
    if (args[args.length - 1] === '/') {
      args = args.substring(0, args.length - 1);
    }
    this.args = args.split('/');
    this.user = this.args[0];
    this.repo = this.args[1];
    if (this.args.length >= 4 && ((_ref = this.args[2].toLowerCase()) === 'tree' || _ref === 'blob')) {
      this.branch = this.args[3];
      this.type = this.args[2].toLowerCase();
      if (this.args.length >= 5) {
        if (this.type === 'tree') {
          this.path = this.args.slice(4).join('/');
          this.filename = null;
        } else {
          this.path = this.args.slice(4, this.args.length - 1).join('/');
          this.filename = this.args[this.args.length - 1];
        }
      } else {
        this.path = '';
      }
    } else {
      this.branch = 'master';
      this.path = '';
    }
  };

  GithubRepo.prototype.init = function(args) {
    var t,
      _this = this;
    this.parse_args(args);
    if (this.type === 'blob') {
      t = "<div id=\"github-openscad-editor\">\n    <span style=\"font-size: 22px;\"><b>Github</b> &raquo; <span class=\"github-path\"></span></span><br />\n    <br />\n    <div class=\"repo-editor\" style=\"float: left; clear: both;\"></div>\n    <div class=\"waiting\" style=\"float: left; clear: both; margin-top: 20px;\"></div>\n</div>";
      this.insert(new Template(t).evaluate({}));
      this.location = this.select('.github-path')[0];
      this.editor_container = this.select('.github-path')[0];
      this.waiting = this.select('.waiting')[0];
      this.blobs = new Hash();
      this.fetch_blob(function(data) {
        return _this.fetch_blob_callback(data);
      });
    } else {
      t = "<div id=\"github-repo\">\n    <br />\n    <span style=\"font-size: 22px;\"><b>Github</b> &raquo; <span class=\"github-path\"></span></span><br />\n    <br />\n    <div class=\"repo-owner\" style=\"float: left; clear: both;\"></div>\n    <div class=\"repo-files\" style=\"float: left; clear: both;\"></div><br />\n    <div class=\"waiting\" style=\"float: left; clear: both; margin-top: 20px;\"></div>\n</div>";
      this.insert(new Template(t).evaluate({}));
      this.location = this.select('.github-path')[0];
      this.owner = this.select('.repo-owner')[0];
      this.files = this.select('.repo-files')[0];
      this.waiting = this.select('.waiting')[0];
      this.setStyle({
        margin: 'auto',
        width: '800px'
      });
      this.fetch_repository(function(data) {
        return _this.fetch_repository_callback(data);
      });
    }
    this.show_path();
  };

  GithubRepo.prototype.show_path = function() {
    var path;
    this.user_url = '#github/' + this.user;
    this.repo_url = '#github/' + this.user + '/' + this.repo;
    if (this.branch.toLowerCase() === 'master' && this.path === '') {
      this.branch_url = this.repo_url;
    } else {
      this.branch_url = '#github/' + this.user + '/' + this.repo + '/tree/' + this.branch;
    }
    path = this.user;
    path += ' &raquo; <a href="' + this.repo_url + '">' + this.repo + '</a>';
    path += ' &raquo; branch: <a href="' + this.branch_url + '">' + this.branch + '</a>';
    if (this.path !== '') {
      path += ' &raquo; tree: ' + this.path;
    }
    if (this.type === 'blob' && (this.filename != null)) {
      path += ' &raquo; blob: ' + this.filename;
    }
    this.location.update(path);
  };

  GithubRepo.prototype.fetch_blob = function(cb) {
    " Perform an ajax request to github and fetches the contents of a blob. ";

    var path, url,
      _this = this;
    path = this.path === '' ? '' : '/' + this.path;
    url = 'https://api.github.com/repos/' + this.user + '/' + this.repo + '/contents' + path + '/' + this.filename + '?ref=' + this.branch;
    new GithubCompatibleAjaxRequest(url, {
      method: 'get',
      evalJSON: true,
      onSuccess: function(response) {
        return cb(response.responseJSON);
      }
    });
  };

  GithubRepo.prototype.fetch_blob_callback = function(data) {
    var text,
      _this = this;
    this.waiting.hide();
    this.blob_data = data;
    text = Base64.decode(data.content);
    this.editor = new Editor('');
    this.editor_container.insert(this.editor);
    this.editor.set_fetch_file_callback(function(name) {
      return _this.file_include_callback(name);
    });
    this.editor.setValue(text);
    this.editor.update();
  };

  GithubRepo.prototype.file_include_callback = function(name) {
    var content, path, url,
      _this = this;
    content = null;
    console.log(['fetching file from github...', name]);
    path = this.path === '' ? '' : '/' + this.path;
    url = 'https://api.github.com/repos/' + this.user + '/' + this.repo + '/contents' + path + '/' + name + '?ref=' + this.branch;
    new GithubCompatibleAjaxRequest(url, {
      asynchronous: false,
      method: 'get',
      evalJSON: true,
      onSuccess: function(response) {
        return content = Base64.decode(response.responseJSON.content);
      }
    });
    return content;
  };

  GithubRepo.prototype.fetch_repository = function(cb) {
    " Perform an ajax request to github and fetches the information about a repository. ";

    var url,
      _this = this;
    url = 'https://api.github.com/repos/' + this.user + '/' + this.repo;
    new GithubCompatibleAjaxRequest(url, {
      method: 'get',
      evalJSON: true,
      onSuccess: function(response) {
        return cb(response.responseJSON);
      }
    });
  };

  GithubRepo.prototype.fetch_repository_callback = function(data) {
    var avatar, created, owner, t,
      _this = this;
    this.repo_data = data;
    owner = data.owner.login;
    avatar = data.owner.avatar_url;
    created = data.created_at;
    t = "<div style=\"float: left; background-color: #E6F0E6; padding: 3px; color: #003300;\">\n    <div style=\"float: left; border: 1px #4D944D solid; background-color: #CCE0CC; padding: 6px; width: 760px;\">\n        <div style=\"float: left; padding: 4px; padding-right: 10px;\">\n            <img src=\"" + avatar + "\" />\n        </div>\n        <div style=\"float: left;\">\n            <span style=\"font-size: larger; font-weight: bold;\">Owner</span> " + owner + "<br />\n            <span style=\"font-weight: bold;\">Created on</span> " + created + "<br />\n        </div>\n    </div>\n</div>";
    this.owner.insert(new Template(t).evaluate({}));
    this.fetch_contents(function(data) {
      return _this.fetch_contents_callback(data);
    });
  };

  GithubRepo.prototype.fetch_contents = function(cb) {
    " Perform an ajax request to github and fetches the files in the repository. ";

    var path, url,
      _this = this;
    path = this.path;
    if (this.type === 'blob' && (this.filename != null)) {
      path += '/' + this.filename;
    }
    url = 'https://api.github.com/repos/' + this.user + '/' + this.repo + '/contents/' + path + '?ref=' + this.branch;
    new GithubCompatibleAjaxRequest(url, {
      method: 'get',
      evalJSON: true,
      onSuccess: function(response) {
        return cb(response.responseJSON);
      }
    });
  };

  GithubRepo.prototype.fetch_contents_callback = function(response) {
    var icon, name, name_cell, obj, path, row, url, _i, _len,
      _this = this;
    this.waiting.hide();
    this.listview = new ListView({
      columns: ['&nbsp;', 'Name', 'Size'],
      columns_width: [24, 632, 80]
    });
    this.files.insert(this.listview);
    for (_i = 0, _len = response.length; _i < _len; _i++) {
      obj = response[_i];
      if (obj.type === 'file' && obj.name.endsWith('.scad')) {
        path = this.path + '/' + obj.name;
        url = this.user + '/' + this.repo + '/blob/' + this.branch + '/' + obj.path;
        icon = '<div class="openscad-icon"></div>';
        name = '<a href="#github/' + url + '">' + obj.path + '</a>';
      } else if (obj.type === 'dir') {
        path = this.path + '/' + obj.name;
        url = this.user + '/' + this.repo + '/tree/' + this.branch + '/' + obj.path;
        icon = '<div class="directory-icon"></div>';
        name = '<a href="#github/' + url + '">' + obj.path + '</a>';
      } else {
        icon = '<div class="file-icon"></div>';
        name = obj.name;
      }
      row = this.listview.append_row([icon, name, obj.size ? obj.size : '-']);
      if ((obj.type === 'file' && obj.name.endsWith('.scad')) || obj.type === 'dir') {
        row.url = url;
        name_cell = row.select('.cell')[1];
        name_cell.setStyle({
          cursor: 'hand'
        });
        name_cell.observe('click', function(e) {
          return _this.browse_cell(e);
        });
        name_cell.observe('mouseover', function(e) {
          return e.findElement('.row').setStyle({
            backgroundColor: '#f0f0f0'
          });
        });
        name_cell.observe('mouseout', function(e) {
          return e.findElement('.row').setStyle({
            backgroundColor: '#ffffff'
          });
        });
      }
    }
  };

  GithubRepo.prototype.browse_cell = function(e) {
    var row, url;
    row = e.findElement('.row');
    url = row.url;
    document.location = '#github/' + url;
  };

  return GithubRepo;

})();
